import com.udojava.evalex.Expression;

import hcs.dsl.ssl.runtime.area.*;
import hcs.dsl.ssl.runtime.app.*;
import hcs.dsl.ssl.runtime.law.markov.*;
import hcs.dsl.ssl.runtime.law.function.*;
import hcs.dsl.ssl.runtime.law.random.*;
import hcs.dsl.ssl.runtime.law.file.*;
import hcs.dsl.ssl.runtime.noise.*;
import hcs.dsl.ssl.runtime.sensor.*;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

#foreach($law in $laws)
    #if (${law.type.name()} == "MARKOV")
        #set($markovLaw = $MarkovLaw.cast($law))

class Law_${markovLaw.name} extends MarkovLaw<${markovLaw.getValType().name()}> {
    public Law_${law.name}() {
        super();
    #foreach($edge in ${markovLaw.getList()})
        #if(${markovLaw.getValType().name()} == "String")
        addEdge( "$edge.from", $edge.proba, "$edge.to" );
        #else
        addEdge( $edge.from, $edge.proba, $edge.to );
        #end
    #end
    }
}
    #elseif(${law.type.name()} == "RANDOM")
        #set($randomLaw = $RandomLaw.cast($law))

        #if ($randomLaw.getList())
class Law_${law.name} extends RandomLawArray<$randomLaw.list.type> {
    public Law_${law.name}() { super(${randomLaw.getList().toString()}); }
}
        #else ## It's an interval
            #if ($randomLaw.interval.getType().name() == "Double")
class Law_${law.name} extends RandomLawIntervalDouble {
            #else
class Law_${law.name} extends RandomLawIntervalInteger {
            #end
    public Law_${law.name}() { super(${randomLaw.interval}); }
}
        #end

    #elseif(${law.type.name()} == "FUNCTION")
        #set($functionLaw = $FunctionLaw.cast($law))

class Law_${law.name} extends FunctionLaw${functionLaw.getFcType()} {
    public Law_${law.name}() {
        super();
        #foreach($case in ${functionLaw.getCases()})
        addCase(${case.toCode()});
        #end
    }
}
    #elseif(${law.type.name()} == "FILE")
        #set($fileLaw = $FileLaw.cast($law))

        #if ($fileLaw.interpolation)
            #set($linearType = ${fileLaw.getValType().name()})

class Law_${law.name} extends LinearInterpolationLaw$linearType {
    public Law_${law.name}() {
        super(new TimeMetadata(${fileLaw.getMinTimestamp()}, ${fileLaw.getMaxTimestamp()}),
            ${fileLaw.interpolation}
        );
    }
}
        #else
            #set ($valType = $law.getValType().name() )

        class Law_${law.name} extends RawFileLaw<$valType> {
    public Law_${law.name}() {
        #set($dataIterator = ${fileLaw.getData().iterator()})
        super(new TimeMetadata(${fileLaw.getMinTimestamp()}, ${fileLaw.getMaxTimestamp()})
            #foreach($data in $dataIterator)
                , new Pt<>${data.toCode()}
            #end
        );
    }
}
        #end
    #end
#end

#foreach($sensor in $sensors)
    #set($law = $laws.get(${sensor.getLawRef()}) )
    #set ($lawType = $law.getValType().name() )

    #if ($lawType == "Double" || $lawType== "Integer" )
class Sensor_${sensor.name} extends NoisableSensor<$lawType> {
    #else
class Sensor_${sensor.name} extends Sensor<$lawType> {
    #end
public Sensor_${sensor.name}() {
    super("${sensor.name}",
        new Law_${law.name}()
        #if($sensor.period), ${sensor.getPeriod().getPeriodMs()}#end
        #if(${sensor.getNoise()}), new Noise${lawType}(${sensor.getNoise()})
    #end);
    }
}
#end

#foreach($area in $areas)
class Area_$area.name extends AreaType {
    public Area_${area.name}() {
        super("$area.name"
    #foreach($sensorGroup in ${area.getSensorGroups()})
        , $sensorGroup
    #end);
    }
}

#end

#foreach($app in $apps)
class App_${app.name} extends App {
    public App_${app.name} () {
        super("${app.name}"
    $global
    #foreach($areaGroup in $app.getAreaGroups())
        $areaGroup
    #end);
    }
}
#end
